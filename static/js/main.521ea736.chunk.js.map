{"version":3,"sources":["components/statistics.js","components/FeedbackOptions.js","components/section.js","components/feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","className","this","props","neutral","bad","good","total","positivePercentage","Component","FeedbackOptions","onLeaveFeedback","name","onClick","Section","title","children","Feedback","state","handleGood","e","setState","handleBad","handleFeedback","currentTarget","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAmBeA,E,uKAfP,OACI,0BAASC,UAAU,aAAnB,UACI,2CAAeC,KAAKC,MAAMC,WAC1B,uCAAWF,KAAKC,MAAME,OACtB,yCAAaH,KAAKC,MAAMG,QAH5B,WAKSJ,KAAKC,MAAMI,MACpB,uBANA,gBAOcL,KAAKC,MAAMK,mBACzB,8B,GAXaC,aCDV,SAASC,EAAT,GAA8C,IAAnBC,EAAkB,EAAlBA,gBAElC,OACI,gCACI,wBAAQC,KAAK,UAAUC,QAASF,EAAhC,qBACA,wBAAQC,KAAK,MAAMC,QAASF,EAA5B,iBACA,wBAAQC,KAAK,OAAOC,QAASF,EAA7B,sBCND,SAASG,EAAT,GAAmD,IAAD,IAAhCC,aAAgC,MAA1B,cAA0B,EAAXC,EAAW,EAAXA,SAClD,OACI,+BACKD,EACAC,K,IC8DEC,E,4MA5DXC,MAAQ,CACJZ,KAAM,EACNF,QAAS,EACTC,IAAK,G,EAGTc,WAAc,SAAAC,GAAC,OACX,EAAKC,SAAS,CACVf,KAAM,EAAKY,MAAMZ,KAAO,K,EAIhCgB,UAAc,SAAAF,GAAC,OACX,EAAKC,SAAS,CACVhB,IAAK,EAAKa,MAAMb,IAAM,K,EAI9BkB,eAAkB,SAAAH,GACc,YAAzBA,EAAEI,cAAcZ,MACf,EAAKS,SAAS,CACdjB,QAAS,EAAKc,MAAMd,QAAU,IAIN,QAAzBgB,EAAEI,cAAcZ,MACf,EAAKS,SAAS,CACdhB,IAAK,EAAKa,MAAMb,IAAM,IAIE,SAAzBe,EAAEI,cAAcZ,MACf,EAAKS,SAAS,CACdf,KAAM,EAAKY,MAAMZ,KAAO,K,EAKhCmB,mBAAqB,WACjB,OAAO,EAAKP,MAAMZ,KAAO,EAAKY,MAAMb,IAAM,EAAKa,MAAMd,S,EAGzDsB,gCAAkC,WAC9B,OAAOC,KAAKC,MAAM,EAAKV,MAAMZ,KAAO,EAAKmB,qBAAuB,MAAQ,G,uDAIxE,OACI,gCACI,cAACX,EAAD,CAASC,MAAM,4BACf,cAACL,EAAD,CAAiBC,gBAAiBT,KAAKqB,iBAEvC,cAACT,EAAD,CAASC,MAAM,eACf,cAAC,EAAD,CAAYT,KAAMJ,KAAKgB,MAAMZ,KAAMF,QAASF,KAAKgB,MAAMd,QAASC,IAAKH,KAAKgB,MAAMb,IAAKE,MAAOL,KAAKuB,qBAAsBjB,mBAAoBN,KAAKwB,2C,GAvDzIjB,aCGRoB,MANf,WACE,OACE,cAAC,EAAD,CAAUjB,KAAK,UCQJkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.521ea736.chunk.js","sourcesContent":["import { Component } from 'react'\n\nclass Statistics extends Component {\n    render() {\n        return(\n            <section className=\"statistics\">\n                <div>Neutral { this.props.neutral }</div>\n                <div>Bad { this.props.bad }</div>\n                <div>Good! { this.props.good }</div>\n        \n            Total:  {this.props.total}\n            <br />\n            Positive % : {this.props.positivePercentage}\n            <br />\n            </section>\n            )\n    }\n}\n\nexport default Statistics\n\n\n","\nexport default function FeedbackOptions ({onLeaveFeedback}) {\n\n        return(\n            <div>\n                <button name=\"neutral\" onClick={onLeaveFeedback}>Neutral</button>\n                <button name=\"bad\" onClick={onLeaveFeedback}>Bad</button>\n                <button name=\"good\" onClick={onLeaveFeedback}>Good!</button> \n            </div>\n        )\n\n}","\nexport default function Section({title=\"Empty title\", children}) {\n    return (\n        <h4>\n            {title}\n            {children}\n        </h4>\n    )\n}","import { Component } from 'react'\nimport Statistics from './statistics'\nimport FeedbackOptions from './FeedbackOptions'\nimport Section from './section'\n\nclass Feedback extends Component {\n\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    }\n \n    handleGood = (e =>\n        this.setState({\n            good: this.state.good + 1\n        })\n    )\n\n    handleBad = ( e => \n        this.setState({\n            bad: this.state.bad + 1\n        })\n    )\n\n    handleFeedback = (e => {\n        if(e.currentTarget.name === \"neutral\") {\n            this.setState({\n            neutral: this.state.neutral + 1\n         })\n        }\n\n        if(e.currentTarget.name === \"bad\") {\n            this.setState({\n            bad: this.state.bad + 1\n         })\n        }\n\n        if(e.currentTarget.name === \"good\") {\n            this.setState({\n            good: this.state.good + 1\n         })\n        }\n    })\n\n    countTotalFeedback = () => {\n        return this.state.good + this.state.bad + this.state.neutral\n    }\n\n    countPositiveFeedbackPercentage = () => {\n        return Math.round(this.state.good / this.countTotalFeedback() * 100) || 0\n    }\n\n    render() {\n        return(\n            <div>\n                <Section title=\"Please leave a feedback\" />\n                <FeedbackOptions onLeaveFeedback={this.handleFeedback} />\n                \n                <Section title=\"Statistics\" />\n                <Statistics good={this.state.good} neutral={this.state.neutral} bad={this.state.bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()} />\n            \n            </div>\n        )\n    }\n}\n\nexport default Feedback","import './App.css';\nimport Feedback from './components/feedback.js'\nfunction App() {\n  return (\n    <Feedback name=\"name\" />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}