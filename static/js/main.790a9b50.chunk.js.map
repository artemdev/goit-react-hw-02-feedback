{"version":3,"sources":["components/section.js","components/notification.js","components/statistics.js","components/FeedbackOptions.js","components/feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","className","Notification","message","Statistics","countTotalFeedback","props","state","good","bad","neutral","countPositiveFeedbackPercentage","Math","round","this","Component","FeedbackOptions","onLeaveFeedback","name","onClick","Feedback","handleFeedback","App","e","currentTarget","setState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOACe,SAASA,EAAT,GAA8D,IAAD,IAA3CC,aAA2C,MAArC,cAAqC,EAAtBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,UAC5D,OACI,gCACI,6BACKF,IAEL,yBAASE,UAAWA,EAApB,SACKD,OCAFE,MARf,YAAwC,IAAD,IAAfC,eAAe,MAAP,GAAO,EACnC,OACI,4BACCA,KCiCMC,E,4MA/BXC,mBAAqB,WACjB,OAAO,EAAKC,MAAMC,MAAMC,KAAO,EAAKF,MAAMC,MAAME,IAAM,EAAKH,MAAMC,MAAMG,S,EAG3EC,gCAAkC,WAC9B,OAAOC,KAAKC,MAAM,EAAKP,MAAMC,MAAMC,KAAO,EAAKH,qBAAuB,MAAQ,G,uDAI9E,OAAGS,KAAKT,sBAAwB,EACrB,cAAC,EAAD,CAAcF,QAAQ,sBAIrB,eAACL,EAAD,CAASC,MAAM,aAAaE,UAAU,aAAtC,UACI,2CAAea,KAAKR,MAAMC,MAAMG,WAChC,uCAAWI,KAAKR,MAAMC,MAAME,OAC5B,yCAAaK,KAAKR,MAAMC,MAAMC,QAHlC,WAKSM,KAAKT,qBACd,uBANA,gBAOcS,KAAKH,kCACnB,8B,GAvBKI,aCHV,SAASC,EAAT,GAA8C,IAAnBC,EAAkB,EAAlBA,gBAElC,OACI,gCACI,wBAAQC,KAAK,UAAUC,QAASF,EAAhC,qBACA,wBAAQC,KAAK,MAAMC,QAASF,EAA5B,iBACA,wBAAQC,KAAK,OAAOC,QAASF,EAA7B,sB,ICgBDG,E,uKAVP,OACI,8BACI,cAACtB,EAAD,CAASC,MAAM,0BAA2BE,UAAU,WAApD,SACI,cAACe,EAAD,CAAiBC,gBAAiBH,KAAKR,MAAMe,yB,GAX1CN,aCAFO,E,4MACnBf,MAAQ,CACNC,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAGPY,eAAkB,SAAAE,GACY,YAAzBA,EAAEC,cAAcN,MACf,EAAKO,SAAS,CACdf,QAAS,EAAKH,MAAMG,QAAU,IAIN,QAAzBa,EAAEC,cAAcN,MACf,EAAKO,SAAS,CACdhB,IAAK,EAAKF,MAAME,IAAM,IAIE,SAAzBc,EAAEC,cAAcN,MACf,EAAKO,SAAS,CACdjB,KAAM,EAAKD,MAAMC,KAAO,K,uDAO5B,OACA,gCACE,cAAC,EAAD,CAAUD,MAAOO,KAAKP,MAAOc,eAAgBP,KAAKO,eAAgBH,KAAK,SACvE,cAAC,EAAD,CAAYX,MAAOO,KAAKP,e,GAhCGQ,aCOlBW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.790a9b50.chunk.js","sourcesContent":["\nexport default function Section({title=\"Empty title\", children, className}) {\n    return (\n        <div>\n            <h2>\n                {title}\n            </h2>\n            <section className={className}>\n                {children}\n            </section>\n        </div>\n        \n    )\n}","function Notification({ message=\"\" })  {\n    return(\n        <p>\n        {message}\n    </p>\n    )\n\n}\nexport default Notification","import { Component } from 'react'\nimport Section  from './section.js'\nimport Notification from './notification.js'\n\nclass Statistics extends Component {\n    countTotalFeedback = () => {\n        return this.props.state.good + this.props.state.bad + this.props.state.neutral\n      }\n\n    countPositiveFeedbackPercentage = () => {\n        return Math.round(this.props.state.good / this.countTotalFeedback() * 100) || 0\n    }\n\n    render() {\n        if(this.countTotalFeedback() <= 0) {\n            return(<Notification message=\"No feedback given\" />)\n        }\n        else {\n            return(               \n                    <Section title=\"Statistics\" className=\"statistics\">\n                        <div>Neutral { this.props.state.neutral }</div>\n                        <div>Bad { this.props.state.bad }</div>\n                        <div>Good! { this.props.state.good }</div>\n                \n                    Total:  {this.countTotalFeedback()}\n                    <br />\n                    Positive % : {this.countPositiveFeedbackPercentage()}\n                    <br />\n                    </Section>\n\n                )\n        }\n        \n    }\n}\n\nexport default Statistics\n\n\n","\nexport default function FeedbackOptions ({onLeaveFeedback}) {\n\n        return(\n            <div>\n                <button name=\"neutral\" onClick={onLeaveFeedback}>Neutral</button>\n                <button name=\"bad\" onClick={onLeaveFeedback}>Bad</button>\n                <button name=\"good\" onClick={onLeaveFeedback}>Good!</button> \n            </div>\n        )\n\n}","import { Component } from 'react'\nimport Statistics from './statistics'\nimport FeedbackOptions from './FeedbackOptions'\nimport Section from './section'\n\nclass Feedback extends Component {\n\n   \n\n\n\n\n    render() {\n        return(\n            <div>\n                <Section title=\"Please leave a feedback\"  className=\"feddback\">\n                    <FeedbackOptions onLeaveFeedback={this.props.handleFeedback} />\n                </Section>\n            </div>\n        )\n    }\n}\n\nexport default Feedback","import './App.css';\nimport Feedback from './components/feedback.js'\nimport Statistics from './components/statistics.js'\nimport { Component } from 'react'\n\nexport default class App extends Component{\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n}\n\n  handleFeedback = (e => {\n    if(e.currentTarget.name === \"neutral\") {\n        this.setState({\n        neutral: this.state.neutral + 1\n    })\n    }\n\n    if(e.currentTarget.name === \"bad\") {\n        this.setState({\n        bad: this.state.bad + 1\n    })\n    }\n\n    if(e.currentTarget.name === \"good\") {\n        this.setState({\n        good: this.state.good + 1\n    })\n    }\n  })\n\n  render() {\n  \n    return (\n    <div>\n      <Feedback state={this.state} handleFeedback={this.handleFeedback} name=\"name\" />\n      <Statistics state={this.state} />\n    </div>\n  );\n} }\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}